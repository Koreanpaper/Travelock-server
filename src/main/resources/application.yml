spring:
  application:
    name: Travelock-server
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: {google api id}
            client-secret: {google api key}
            scope: profile, email
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            client-name: Google

          naver:
            client-id: {naver api id}
            client-secret: {naver api key}
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:9091/login/oauth2/code/naver
            client-name: Naver
            scope:
              - name
              - email
          kakao:
            client-id: {kakao rest key}
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/kakao"
            client-name: Kakao
            scope:
              - profile_nickname
              - account_email


        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            user-info-uri: https://kapi.kakao.com/v2/user/me

  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    url: jdbc:mariadb://localhost:3306/travelock_db?useUnicode=true&characterEncoding=utf8mb4&serverTimezone=Asia/Seoul
    username: root
    password: 1234

    #  db ????? ????? ??
    #  SHOW VARIABLES LIKE 'character_set_database';
    #  ALTER DATABASE funding_db CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;
    #  utfmb4 - 4???? ???? ????, ??? utf8? ??

  sql:
    init:
      mode: always # h2?? ???? ?????? ? mysql?? db? data.sql? ??? ?? ??

  jpa:
    hibernate:
      ddl-auto: create
    #  show-sql: true
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy

    #Swagger 3.0
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  data:
    redis:
#      host: redis
      host: localhost
      port: 6379

#Swagger 3.0
#?? ?? ? ?? ??
#http://localhost:9091/swagger-ui/index.html
springdoc:
  swagger-ui:
    path: /api-docs
  api-docs:
    path: /v3/api-docs
    enabled: true # open-api ????

application:
  security:
    jwt: awefawefawefawef123412341234

server:
  port: 8080