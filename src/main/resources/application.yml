spring:
  application:
    name: Travelock-server

  security:
    oauth2:
      client:
        registration:
          naver:
            client-name: naver
            client-id: <your-naver-client-id>
            client-secret: <your-naver-client-secret>
            redirect-uri: http://localhost:8080/login/oauth2/code/naver
            authorization-grant-type: authorization_code
            scope:
              - name
              - email
          google:
            client-name: google
            client-id: <your-google-client-id>
            client-secret: <your-google-client-secret>
            redirect-uri: http://localhost:8080/login/oauth2/code/google
            authorization-grant-type: authorization_code
            scope:
              - profile
              - email
          kakao:
            client-name: Kakao
            client-id: <your-kakao-client-id>
            client-secret: <your-kakao-client-secret>
            redirect-uri: http://localhost:8080/login/oauth2/code/kakao
            authorization-grant-type: authorization_code
            scope:
              - profile_nickname
              - account_email
            client-authentication-method: client_secret_post
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id



  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    url: jdbc:mariadb://localhost:3306/travelock_db?useSSL=false&useServerPrepStmts=true&useUnicode=true&characterEncoding=utf8mb4&serverTimezone=Asia/Seoul
    username: root
    password: 123123

  jpa:
    hibernate:
      ddl-auto: update
    #  show-sql: true
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
    # SpringDataJpa의 batch처리를위한 설정
    properties:
      hibernate:
        jdbc:
          batch_size: 50  # 한 번에 처리할 엔티티 수
        order_inserts: true
        order_updates: true
        jdbc.batch_versioned_data: true

    #Swagger 3.0
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  data:
    redis:
#      host: redis
      host: localhost
      port: 6379

#Swagger 3.0
#http://localhost:8080/swagger-ui/index.html
springdoc:
  swagger-ui:
    path: /api-docs
  api-docs:
    path: /v3/api-docs
    enabled: true

application:
  security:
    jwt:
      secret-key: awefawefawefawef123412341234a23ta23ta23ta23ta23ta23t


server:
  port: 8080


